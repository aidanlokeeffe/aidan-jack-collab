0,0,0,1,0)
P = matrix(entries, nrow=5, ncol=5, byrow = TRUE)
# 1d
entries = c(.5,.5,0,0,0,
0,0,1,0,0,
1,0,0,0,0,
0,0,0,0,1,
0,0,0,1,0)
P = matrix(entries, nrow=5, ncol=5, byrow = TRUE)
partD<-eigen(P)
partD
e1 <- partD$Vectors[,1]
e1 <- e1/sum(e1)
partD
e1 <- partD$Vectors[,1]
e1 <- e1/sum(e1)
e1
e1 <- partD$vectors[,1]
e1 <- e1/sum(e1)
e1
e2 <- partD$vectors[,3]
e2 <- e2/sum(e2)
e2
#b
Q = matrix(c(0,0,.5,
.5,0,.5,
0,.5,.5), byrow=TRUE, nrow=3)
Q
solve(diag(3)-Q)
Qinv = solve(diag(3)-Q)
Qinv %*% Q
Qinv = solve(diag(3)-Q,diag(3))
Qinv %*% Q
Qinv
Qinv %*% Q
Qinv = solve(diag(3)-Q, matrix(c(1,0,0), nrow=3)
Qinv = solve(diag(3)-Q, matrix(c(1,0,0), nrow=3))
Qinv
Qinv = solve(diag(3)-Q, matrix(c(1,0,0), nrow=3))
Qinv
Qinv = matrix(c(-2,2,0,-2,0,2,2,0,0),nrow=3,byrow = TRUE)
Qinv
qinv %*%Q
Qinv %*%Q
qinv%*%matrix(c(1,1,1), nrow=3,byrow=TRUE)
Qinv%*%matrix(c(1,1,1), nrow=3,byrow=TRUE)
Qinv = solve(diag(3)-Q, matrix(c(1,0,0), nrow=3))
Qinv
(diag(3)-Q)%*%Qinv
Qinv = solve(diag(3)-Q)
Qinv
(diag(3)-Q)%*%Qinv
source('C:/Users/aidan/OneDrive/Desktop/Sp21/M362M/HW10/scratch10.R', echo=TRUE)
Qinv
#c
Q = matrix(c(0,0,0,.5,
.5,0,0,.5,
0,.5,0,.5,
0,0,.5,.5),nrow=4,byrow=TRUE)
r = matrix(c(0,1,0,0),nrow=4,byrow=TRUE)
Qinv = solve(diag(4)-Q)
Qinv
Qinv%*%r
# Problem 3
entries =
c(0)
for (j in 0:(n-1)) {
P[i, bitXor(i-1, 2^j) + 1] = 1 / (2*n)
}
# This function generates the transition matrix for the states ordered
# lexicographically (i.e. 0...000, 0...001, 0...010, 0...011, etc)
transitions = function(n) {
P = matrix(0, nrow=2^n, ncol=2^n)
for (i in 1:2^n) {
P[i,i] = 0.5
for (j in 0:(n-1)) {
P[i, bitXor(i-1, 2^j) + 1] = 1 / (2*n)
}
}
P
}
tvdist(d1,d2){
tvdist <- function(d1,d2){
return( sum(abs(d1-d2))/2 )
}
d1 = c(1,0,0)
d2 = c(1/3,1/3,1/3)
tvdist(d1,d2)
st_dist = c(1,1,1)/3
st_dist
st_dsbn <- function(n){
div = 2^n
return( rep(1/div, 2^n) )
}
P = transitions(3)
# install.packages("bitops")
library(bitops)
install.packages("bitops")
# This function generates the transition matrix for the states ordered
# lexicographically (i.e. 0...000, 0...001, 0...010, 0...011, etc)
transitions = function(n) {
P = matrix(0, nrow=2^n, ncol=2^n)
for (i in 1:2^n) {
P[i,i] = 0.5
for (j in 0:(n-1)) {
P[i, bitXor(i-1, 2^j) + 1] = 1 / (2*n)
}
}
P
}
tvdist <- function(d1,d2){
return( sum(abs(d1-d2))/2 )
}
d1 = c(1,0,0)
1,0,0)
1,0,0)
d1 = c(1,0,0)
d2 = c(1/3,1/3,1/3)
tvdist(d1,d2)
st_dsbn <- function(n){
div = 2^n
return( rep(1/div, 2^n) )
}
P = transitions(3)
init = c(1,0,0,0,0,0,0,0)
init = matrix(init, nrow=1,byrow=TRUE)
d1 = init%*%P
st_dist(st_dsbn(3), d1)
tvdist(st_dsbn(3), d1)
d1
st_dsbn(3)
st_dsbn <- function(n){
div = 2^n
return( rep(1/div, 2^n) )
}
P = transitions(3)
init = c(1,0,0,0,0,0,0,0)
init = matrix(init, nrow=1,byrow=TRUE)
d1 = init%*%P
dists <- c()
dists <- c(dists, tvdist(st_dsbn(3), d1))
dists[1]
for(n in 2:8){
init = rep(0, 8)
init[n] = 1
init = matrix(init, nrow=1, byrow=TRUE)
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(3), d))
}
library(expm)
for(n in 2:8){
init = rep(0, 8)
init[n] = 1
init = matrix(init, nrow=1, byrow=TRUE)
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(3), d))
}
plot(x=1:8, y=dists, main="Total Variation Distances")
plot(x=1:8, y=dists, main="Total Variation Distances", pch=20)
for(n in 2:10){
init = rep(0, 8)
init[n] = 1
init = matrix(init, nrow=1, byrow=TRUE)
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(3), d))
}
st_dsbn <- function(n){
div = 2^n
return( rep(1/div, 2^n) )
}
P = transitions(3)
init = c(1,0,0,0,0,0,0,0)
init = matrix(init, nrow=1,byrow=TRUE)
d1 = init%*%P
dists <- c()
dists <- c(dists, tvdist(st_dsbn(3), d1))
dists[1]
4. Repeat the previous question for $X_2$ through $X_{10}$ and plot your results.
```{r}
for(n in 2:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(3), d))
plot(x=1:8, y=dists, main="Total Variation Distances, n=3", pch=20)
for(n in 2:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(3), d))
}
gv
asgf
for(n in 2:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(3), d))
}
plot(x=1:8, y=dists, main="Total Variation Distances, n=3", pch=20)
plot(x=1:10, y=dists, main="Total Variation Distances, n=3", pch=20)
P = transitions(4)
init = rep(0, 2^4)
init[1]=1
init=matrix(init,nrow=1,byrow=TRUE)
for(n in 2:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(4), d))
}
plot(x=1:10, y=dists, main="Total Variation Distances, n=3", pch=20)
for(n in 1:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(4), d))
}
plot(x=1:10, y=dists, main="Total Variation Distances, n=4", pch=20)
dists = c()
for(n in 1:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(4), d))
}
plot(x=1:10, y=dists, main="Total Variation Distances, n=4", pch=20)
P = transitions(4)
init = rep(0, 2^4)
init[1]=1
init=matrix(init,nrow=1,byrow=TRUE)
dists = c()
for(n in 1:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(4), d))
}
dists[1]
plot(x=1:10, y=dists, main="Total Variation Distances, n=4", pch=20)
P = transitions(8)
init = rep(0, 2^8)
init[1]=1
init=matrix(init,nrow=1,byrow=TRUE)
dists = c()
for(n in 1:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(8), d))
}
dists[1]
plot(x=1:10, y=dists, main="Total Variation Distances, n=8", pch=20)
P = transitions(8)
init = rep(0, 2^8)
init[1]=1
init=matrix(init,nrow=1,byrow=TRUE)
dists = c()
for(n in 1:20){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(8), d))
}
dists[1]
plot(x=1:10, y=dists, main="Total Variation Distances, n=8", pch=20)
plot(x=1:20, y=dists, main="Total Variation Distances, n=8", pch=20)
P = transitions(8)
init = rep(0, 2^8)
init[1]=1
init=matrix(init,nrow=1,byrow=TRUE)
dists = c()
for(n in 1:10){
d = init %*% (P %^% n)
dists <- c(dists, tvdist(st_dsbn(8), d))
}
dists[1]
plot(x=1:10, y=dists, main="Total Variation Distances, n=8", pch=20)
entries = c(1/2, 1/2, 0, 0, 0, 0, 0, 0,
1/2, 1/2, 0, 0, 0, 0, 0, 0,
0, 1/3, 1/3, 0, 0, 0, 1/3, 0,
0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,
0,0,0,1,0,0,0,0,
0,0,0,0,0,0,2/3,1/3,
0,0,0,0,0,0,1/2,1/2)
matrix(entries, nrow=6, ncol=6, byrow=TRUE)
matrix(entries, nrow=8, ncol=8, byrow=TRUE)
P = matrix(entries, nrow=8, ncol=8, byrow=TRUE)
eigen(transpose(P))
eigen(t(P))
p=0.6
entries = c(1,0,0,0,0,0,0,0,0,0,0,
1-p,0,p,0,0,0,0,0,0,0,0,
0,1-p,0,p,0,0,0,0,0,0,0,
0,0,1-p,0,p,0,0,0,0,0,0,
0,0,0,1-p,0,p,0,0,0,0,0,
0,0,0,0,1-p,0,p,0,0,0,0,
0,0,0,0,0,1-p,0,p,0,0,0,
0,0,0,0,0,0,1-p,0,p,0,0,
0,0,0,0,0,0,0,1-p,0,p,0,
0,0,0,0,0,0,0,0,1-p,0,p,
0,0,0,0,0,0,0,0,0,0,1)
P = matrix(entries, nrow=11,ncol=11,byrow=TRUE)
p=0.6
entries = c(1,0,0,0,0,0,0,0,0,0,0,
1-p,0,p,0,0,0,0,0,0,0,0,
0,1-p,0,p,0,0,0,0,0,0,0,
0,0,1-p,0,p,0,0,0,0,0,0,
0,0,0,1-p,0,p,0,0,0,0,0,
0,0,0,0,1-p,0,p,0,0,0,0,
0,0,0,0,0,1-p,0,p,0,0,0,
0,0,0,0,0,0,1-p,0,p,0,0,
0,0,0,0,0,0,0,1-p,0,p,0,
0,0,0,0,0,0,0,0,1-p,0,p,
0,0,0,0,0,0,0,0,0,0,1)
P = matrix(entries, nrow=11,ncol=11,byrow=TRUE)
partb<-eigen(t(P))
partb
# 1c
p=0.5
entries = c(0,1,0,0,0,0,0,0,0,0,0,
1-p,0,p,0,0,0,0,0,0,0,0,
0,1-p,0,p,0,0,0,0,0,0,0,
0,0,1-p,0,p,0,0,0,0,0,0,
0,0,0,1-p,0,p,0,0,0,0,0,
0,0,0,0,1-p,0,p,0,0,0,0,
0,0,0,0,0,1-p,0,p,0,0,0,
0,0,0,0,0,0,1-p,0,p,0,0,
0,0,0,0,0,0,0,1-p,0,p,0,
0,0,0,0,0,0,0,0,1-p,0,p,
0,0,0,0,0,0,0,0,0,1,0)
P = matrix(entries, nrow=11,ncol=11,byrow=TRUE)
partC<-eigen(t(P))
partC
e1<-partC$vectors[,2]
e1 <- -e1
e1 <- e1/sum(e1)
sum(e1)
e1
# 1d
entries = c(.5,.5,0,0,0,
0,0,1,0,0,
1,0,0,0,0,
0,0,0,0,1,
0,0,0,1,0)
P = matrix(entries, nrow=5, ncol=5, byrow = TRUE)
partD<-eigen(t(P))
partD
e1 <- partD$vectors[,1]
e1 <- e1/sum(e1)
e1
e2 <- partD$vectors[,3]
e2 <- e2/sum(e2)
e2
e2 <- partD$vectors[,2]
e2 <- e2/sum(e2)
e2
Qinv = solve(diag(3)-Q)
Q = matrix(C(0.5, 0.5, 0,
0.5, 0, 0.5,
0.5, 0, 0),nrow=3,ncol=3,byrow=TRUE)
Q = matrix(c(0.5, 0.5, 0,
0.5, 0, 0.5,
0.5, 0, 0),nrow=3,ncol=3,byrow=TRUE)
Qinv = solve(diag(3)-Q)
Qinv
Qinv%*%matrix(c(1,1,1), nrow=3,byrow=TRUE)
entries = c(1/2, 1/2, 0, 0, 0, 0, 0, 0,
1/2, 1/2, 0, 0, 0, 0, 0, 0,
0, 1/3, 1/3, 0, 0, 0, 1/3, 0,
0,0,0,0,1,0,0,0,
0,0,0,0,0,1,0,0,
0,0,0,1,0,0,0,0,
0,0,0,0,0,0,2/3,1/3,
0,0,0,0,0,0,1/2,1/2)
P = matrix(entries, nrow=8, ncol=8, byrow=TRUE)
eigen(t(P))
part_d<-eigen(t(P))
e1 <- part_d$vectors[,3]
e1 <- e1 / sum(e1)
sum(e1)
e1
P = matrix(c(0.9,0.1,0,
0,0,1,
1,0,0), nrow=3, ncol=3,byrow=TRUE)
question2 <- eigen(t(P))
question2
stationary <- question2$vectors[,1]
stationary <- stationary/sum(stationary)
stationary
sum(stationary)
loss_cases = c(0,-10000,-10000)
sum(loss_cases*stationary)
real(sum(loss_cases*stationary))
sum(loss_cases*stationary)
two_computers <- function(p){
q = 1-p
entries=c(p^2,q*p,q^2,p*q,0,0,0,0,0,
0,0,0,0,p,q,0,0,
0,0,0,0,0,.5,.5,0,
0,0,0,0,0,0,q,p,
p,0,0,q,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,
p,q,0,0,0,0,0,0)
out = matrix(entries, nrow=8, ncol=8, byrow=TRUE)
return(out)
}
P = two_computers(0.9)
# p is the probability that one computer works in the morning the next day
two_computers <- function(p){
q = 1-p
entries=c(p^2,q*p,q^2,p*q,0,0,0,0,
0,0,0,0,p,q,0,0,
0,0,0,0,0,.5,.5,0,
0,0,0,0,0,0,q,p,
p,0,0,q,0,0,0,0,
0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,
p,q,0,0,0,0,0,0)
out = matrix(entries, nrow=8, ncol=8, byrow=TRUE)
return(out)
}
P = two_computers(0.9)
P
question4 <- eigen(P)
question4
stationary <- question4[,1]
stationary <- question4$vectors[,1]
stationary <- stationary/sum(stationary)
stationary
sum(loss_cases * stationary)
loss_cases = c(0,0,-10000,0,0,-10000,-10000,0)
sum(loss_cases * stationary)
one_computer <- function(p){
entries = c(p,1-p,0,
0,0,1,
1,0,0)
out = matrix(entries, nrow=3,ncol=3,byrow=TRUE)
return(out)
}
# Repeat one computer with failure rate of 80% (p=0.2)
a <- eigen(one_computer(0.2))
a
# Repeat one computer with failure rate of 80% (p=0.2)
a <- eigen(one_computer(0.2))
a
dist1 <- a$vectors[,1] / sum(a$vectors[,1])
loss_cases = c(0,-10000,-10000)
sum(loss_cases * dist1)
b <- eigen(two_computers(0.2))
b
b <- eigen(two_computers(0.2))
b
dist2 <- b$vectors[1,] / sum(b$vectors[,1])
loss_cases <- c(0,0,-10000,0,0,-10000,-10000,0)
sum(loss_cases * dist2)
dist2
b
dist2
dist1 <- a$vectors[,1]
dist1 <- dist1 / sum(dist1)
dist1
dist2 <- b$vectors[1,]
dist2 <- dist2 / sum(dist2)
dist2
loss_cases <- c(0,0,-10000,0,0,-10000,-10000,0)
sum(loss_cases * dist2)
10*10
sample(c(0,1),replace=TRUE,size=100, prob=c(0.3,0.7))
sample(c(0,1),replace=TRUE,size=9, prob=c(0.3,0.7))
sample(c(0,1),replace=TRUE,size=8, prob=c(0.3,0.7))
sample(c(0,1),replace=TRUE,size=8, prob=c(0.3,0.7))
sample(c(0,1),replace=TRUE,size=8, prob=c(0.7,0.3))
sample(c(0,1),replace=TRUE,size=8, prob=c(0.9,0.1))
sample(c(0,1),replace=TRUE,size=8, prob=c(0.85,0.15))
sample(c(0,1), 20, replace = TRUE, prob=(.35, .65))
sample(c(0,1), 20, replace = TRUE, prob=c(.35, .65))
sample(c(0,1), 20, replace = TRUE, prob=c(.35, .65))
sample(c(1,2))
sample(c(1,2), size=1)
sample(1:7, 1)
sample(1:7, 2)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:3, 1)
sample(1:2, 1)
sample(1:3, 2)
sample(1:7, 2)
sample(2:7, 23)
sample(2:7, 2)
sample(1:3, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:7, 1)
sample(1:2, size=6)
sample(1:2, size=6, replace = TRUE)
sample(c("Michael", "Averly"), size=1)
sample( c("Marcella", "Jonathan"), size=1 )
sample( c("Averly", "Jonathan"), size=1 )
setwd("C:/Users/aidan/OneDrive/Desktop/aidan-jack-collab")
coco_IS = read.csv("better_correlation_data/cocomac_for_corr_IS.csv")
coco_RW = read.csv("better_correlation_data/cocomac_for_corr_RW.csv")
monkey91_IS = read.csv("better_correlation_data/monkey91_for_corr_IS.csv")
monkey91_RW = read.csv("better_correlation_data/monkey91_for_corr_RW.csv")
threshmouse_IS = read.csv("better_correlation_data/threshmouse_for_corr_IS.csv")
threshmouse_RW = read.csv("better_correlation_data/threshmouse_for_corr_RW.csv")
View(coco_IS)
View(coco_IS)
View(coco_RW)
View(coco_RW)
View(monkey91_IS)
View(monkey91_IS)
View(monkey91_RW)
View(monkey91_RW)
View(threshmouse_IS)
View(threshmouse_IS)
View(threshmouse_RW)
View(threshmouse_RW)
